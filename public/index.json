[{"content":"","date":"2024-01-17","permalink":"/tags/c/","section":"Tags","summary":"","title":"c"},{"content":"","date":"2024-01-17","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"2024-01-17","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":"","date":"2024-01-17","permalink":"/series/skynet-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","section":"Series","summary":"","title":"skynet 学习笔记"},{"content":"skynet_main.c # skynet 的程序入口skynet_main.c 中.\nskynet_globalinit() # skynet_globalinit() 方法进行了当前节点的初始化, 节点的内存结构如下:\nstruct skynet_node { ATOM_INT total; //Todo: 不知道干啥的 int init; //初始化是否已完成(猜测不用bool是因为部分平台不支持?) uint32_t monitor_exit; //Todo: 不知道干啥的 pthread_key_t handle_key; //threadLocal 记录本线程类型的 key bool profile;\t// default is on }; 扩展阅读 - pthread.h # 其中 pthread_key_t 来自 linux 的 pthread 库, 该库提供了常见的线程操作. 这里用到了类似 \u0026gt; ThreadLocal 的线程内变量的功能(在不同线程中名称相同, 但内容各自独立的变量):\npthread_key_create() 创建一个绑定于当前线程的全局变量 @param pthread_key_t * 该变量的 key @param void (* _Nullable)(void *) 变量销毁时的析构函数 pthread_setspecific() 设置变量的值 @param pthread_key_t: 该变量的 key @param const void * _Nullable: 该变量的 value pthread_getspecific() @param pthread_key_t: 该变量的 key @return * _Nullable: 该变量的 value pthread_key_delete() 删除该变量, 并触发其析构函数 @param pthread_key_t: 该变量的 key skynet_env_init() # skynet_env_init() 方法设置了当前 skynet 服务的环境, 该环境结构如下:\nstruct skynet_env { struct spinlock lock; //自旋锁 lua_State *L; //lua虚拟机 }; 在进行环境初始化时, 首先为该结构分配了内存空间, 然后创建了新的 lua 虚拟机作为 L 的值.\nsigign() # sigign() 方法生成了一个用于忽略某信号的 sigaction, 并将其绑定到管道信号 SIGPIPE 上.\n扩展阅读 - signal.h # sigaction() 来自 c 标准库, 接收一个信号类型枚举和一个用以处理该信号的方法 sa_handler. 此处使用的 SIG_IGN 是标准库提供的默认处理方法之一, 用以忽略对某一信号的处理.\n配置加载 # 使用 lua 代码加载启动参数中指定的配置文件, 并将信息写入提前声明的 c 结构 config 中.\nskynet 的配置结构请参考: https://github.com/cloudwu/skynet/wiki/Config\n扩展阅读 - lua # luaL_newstate() 创建一个新的 lua 虚拟机环境. luaL_openlibs(L) 将 lua 标准库加载入该环境中. luaL_loadbufferx() 将一段指定的 lua 代码压入栈顶 lua_pushstring() 将一段字符串压入栈顶, 此处是上述代码段中要使用的参数. lua_pcall() 调用之前压入的 lua 代码段\n_init_env() # 加载配置到 lua 虚拟机后, 用该虚拟机进行 skynet 环境的初始化. 如前文所说, skynet 环境的主体也是一个 lua 虚拟机, 这里做的工作本质上其实是将配置文件中的键值对作为全局变量, 加载到这个 lua 虚拟机中.\n扩展阅读 - lua # 在加载过程中, 有两处经典的 lua 用法:\n一处是在加载配置文件时, 使用了 luaL_loadbufferx 将字符串形式的 lua 代码加载到 lua 虚拟机中, 然后使用 lua_pcall 来调用这段代码:\nint err = luaL_loadbufferx(L, load_config, strlen(load_config), \u0026#34;=[skynet config]\u0026#34;, \u0026#34;t\u0026#34;); assert(err == LUA_OK); lua_pushstring(L, config_file); err = lua_pcall(L, 1, 1, 0); 另一处是在 _init_env 中进行的经典的遍历 lua 表的操作:\nlua_pushnil(L); /* first key */ while (lua_next(L, -2) != 0) { int keyt = lua_type(L, -2); const char * value = lua_tostring(L,-1); lua_pop(L,1); } lua_pop(L,1); 这里 lua_next 的作用是从虚拟机栈顶部弹出一个元素, 然后把索引指向的表中的一个键值对弹出, 并分别压入虚拟机栈顶部(先压入键后压入值), 如果目标表已无任何元素, 则返回 0.\nskynet_start() # 初始化日志\n注册SIGHUP信号 初始化为守护线程 启动守护线程 记录pid 重定向标准输入输出到空文件(/dev/null) ","date":"2024-01-17","permalink":"/posts/skynet_reading/","section":"Posts","summary":"skynet_main.c # skynet 的程序入口skynet_main.c 中. skynet_globalinit() # skynet_globalinit() 方法进行了当前节点的初始化, 节点的内存结构如下: struct skynet_node { ATOM_INT total; //Todo: 不知道干啥的 int init; //初始化是否已完成(猜测不用bool是因为部分平台不支持?) uint32_t monitor_exit; //Todo: 不知","title":"skynet源码梳理"},{"content":"","date":"2024-01-17","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"2024-01-17","permalink":"/","section":"和 Moonfair 一起摸大鱼","summary":"","title":"和 Moonfair 一起摸大鱼"},{"content":"","date":"2024-01-17","permalink":"/tags/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8/","section":"Tags","summary":"","title":"游戏服务器"},{"content":" You and Your Research 作者：理查德·汉明（Richard Hamming） 译者：未知 时间：1986年3月7日\nFrom: 理查德·汉明《你和你的研究》\n我演讲的题目是\u0026quot;你和你的研究\u0026quot;。我要谈的不是普通的研究，而是重大的研究，就是相当诺贝尔奖那一级别的研究。比如，相对论，香农的信息论，以及其他杰出的理论\u0026mdash;-这就是我要讲的。\n1945年，我进入洛斯阿拉莫斯国家实验室，负责计算机方面的事，因此见过费曼、费米、奥本海默等大科学家。我一直问自己这样的问题： \u0026ldquo;为什么他们做出了这样的成果？\u0026ldquo;和\u0026quot;我和他们的差别是什么\u0026rdquo; 。我读了传记、自传，去问他们本人：\u0026ldquo;你是怎么干起来这样的事的？\u0026rdquo; 我试着搞清原因，这就是今天要谈的内容。\n为什么这个话题重要？因为你只有一次生命。即使你相信来世，那也没关系，为什么不在今生就做一些重大的事呢。\n一、要有做大事的想法 # 首先，你要有干大事的想法。很多人毕生只是例行公事般地从事安全的工作，所以产出有限。就这么简单：如果你要干大事，你必须毫不迟疑地去解决重大难题。\n我遇到费曼时，就知道他肯定能得诺贝尔奖。因为他会从事伟大的工作。不论未来走哪个方向，这个人都会干大事。\n你要跟自己说，往前走，去做大事！\n二、年轻的时候就要有勇气追求答案 # 成功科学家的重要品质之一就是勇气。\n一旦你鼓起了勇气，相信自己能解决重要的问题，那么你就行。如果你觉得你不行，几乎肯定你不会去做。伟大的科学家都充满勇气，他们不管周围境况，勇往直前；他们思考、思考、再思考。\n年龄是另一个因素。你要做就得趁年轻。爱因斯坦做事就早，所有的量子理论的大科学家开始做他们的\u0026quot;事\u0026quot;的时候，都早得吓人。大多数数学家、理论物理学家，以及天体物理学家都在他们的早年，作出了我们公认的他们最好的成就。这并不是说他们岁数大了以后，就不能做有益的工作。是我们认为他们最有价值的事是他们年轻的时候所为。另一方面，在音乐、政治和文学方面，通常的情况是，那些我们仰慕的大作品往往出炉较晚。\n三、忍受不确定的状态 # 伟大科学家还有另一个性格方面的特点，那就是\u0026quot;似是而非\u0026rdquo;。大多数人愿意相信世上万物非此即彼，是非分明。大科学家们却能很大程度地容忍\u0026quot;似是而非\u0026quot;。他们对自己的想法非常自信，但是又保持足够的警觉，随时挑出其中的错误和瑕疵。\n如果你过于自信，你将忽视其中的破绽；如果你过分怀疑，你甚至将无从起步。这需要一个良好的平衡。多数大科学家非常清楚为什么他们的理论是真知灼见，同时也知道哪里还有些小毛病。\n四、比别人多努力10% # 大多数伟大的科学家都有惊人的动力。他们总是比别人投入更多。假设两个人拥有几乎一样的能力，其中一个人比另一个人多干10%，几年后他将多产一倍。\n你知道得越多，就学得越多；你学得越多，就做得越多；你做得越多，机会就越多。\n五、全力投入重要的问题 # 如果你找到一件真正重要的事情，就不要让任何别的事情分散你的注意力。\n多数大科学家口袋里约有一二十个大问题，想方设法去攻克。每当他们发现一个新想法出现的时候，你就会听到他们说：\u0026ldquo;唔，这个与该问题有关。\u0026rdquo; 他们于是抛开其他一切，全力投入此问题。\n他们的思想是时刻准备着的，看见机会就紧跟其后。当然，很多时候也不能奏效，一个主要的诀窍就是活得长一点。\n六、敞开办公室大门 # 另一个性格特点，我一开始没注意到：有人的办公室大门是关着的，另一些人是开着的。\n我观察到，如果关上办公室的门，你今天或明天确实会比别人多干不少的活。但是，十年后就未必了。因为你可能干了不少不值得干的事。那些把门敞开的人，的确受了很多的打扰，但他也不时地获得线索，了解这世界什么更重要。\n我可以说，那些敞开了门干活的人和最终成就了大事的人之间，存在千丝万缕的联系。\n七、做可以成为他人基石的工作 # 早年，我在攻克一个又一个难题，成功的多，失败的少。可是，周五解决了一个问题回到家里后，我却并不快活，反而很沮丧。我看到生活就是一个问题接着一个问题又接着另一个问题。\n想了相当长一阵子后，我决定以另一种方式干活：你的工作要成为别人工作的基石！于是别人就会说： \u0026ldquo;看哪，我站在他的肩膀之上，我看得更远了。\u0026rdquo;\n科学的本质是积累！我再也不去做相互孤立的问题，除非它能代表某一类问题的共性。我决不再去解决单一的问题。\n你要么让人们在你的成果上有所建树，要么别人不得不把你干的活从头再来复制一遍。\n八、重视推销和表达自己 # 做完一件事情还不够，你还得把它\u0026quot;贩卖\u0026quot;出去。\n对于一个科学家而言，推销是一件棘手的事。这很讨厌，你本不该做这事，这世界就该等着，当你做成某件大事时，他们就该赶快出来主动迎接。但是，事与愿违，每个人都忙着他们自己的活。你必须很好地主动介绍，使得他们能把手头的活放在一边，过来瞧瞧你的东西，理解它，然后回过头来说：\u0026ldquo;是，那玩意不错。\u0026rdquo; 现实是即使你发表了研究成果，如果读者们把你的文章翻过去，不停下来读它，你就会竹篮打水一场空。\n**你得学会写好、写清楚以便人们愿意看；你必须学会发表相当正式的发言；你还必须学会作出非正式的谈话。**我们有不少所谓的\u0026quot;后排科学家\u0026quot;。在一个会议上，他们更愿意闭口不谈。他们不愿站在一个炙手可热的会议的中央，在大庭广众之下说：\u0026ldquo;我们应该做这件事，为了这些原因\u0026hellip;\u0026hellip;\u0026rdquo; 你必须掌握这种形式的交流，准备发表演说。\n我刚开始做演讲的时候，非常非常紧张，几乎表现出生理上的病态。我意识到，我得学习作演讲，否则整个职业生涯就不会有很好的发展。我决定一定要做一个非常好的演讲，一个真正符合听众需要的演讲，不只针对专业人士，而是针对更广泛的听众。\n现在，我认为，研究要只花50%的时间，另外50%的时间用来表达，这是一个非常大的数字。\n九、阅读方法比数量更重要 # 你也不要在图书馆花太多时间，一味追随别人的研究成果。\n贝尔实验室有个同事，一个非常非常聪明的家伙。他老在图书馆里呆着，读所有的东西。如果你想要参考资料，你到他那里去，他就会告诉你所有的参考资料。但我觉得，长此以往，他不会有任何以他命名的成果。他现在已退休，成为了一个副教授。他是很有价值，我对此没有疑问。他写了一些不错的文章登在《物理评论》上，但他没有以他命名的成果，因为他读得太多。如果你成天研究别人怎么做，你就会按别人的老路子思考。\n如果你想要有不同的新思维，你需要去搞清问题，而不是成天靠读书去找答案。这不是可取的方法。\n我的建议是：阅读，但不是靠量，而是靠正确的阅读方法起作用。\n十、重视写书 # 短期来看，论文非常重要。但如果你想要一个长期的认可，写书的作用更大，因为我们大多数人需要方向。现今的知识几乎是无穷的，我们需要寻找自己的方向。那些帮助我们融会贯通的、代表重要思想的书，会被后代珍视。\n写论文也是必要的，但我倾向于认为，长期看，那些只写至关重要内容的书更重要。\n十一、远见超出你的能力时，才去做管理 # 如果你想成为一名伟大的研究者，就不要成为一个公司的总裁。你得清楚你要什么。\n一天，我到我的老板Bode那里，对他说：\u0026ldquo;为什么你要当这个部门的头呢？为什么你不去当一名大科学家呢？\u0026rdquo; 他说：\u0026ldquo;Hamming， 我有远见，知道贝尔实验室的数学部分要怎样，如果要让这个\u0026quot;远见\u0026quot;得到共识，我就得当上部门的头。\u0026rdquo;\n当你觉得你想干什么的远见，正好在你的能力范围内，你就应努力获取它。如果有一天你的远见大大超过了你的能力时，你就应该去做管理工作。而且，远见越大，你就应做越大的管理。如果你拥有一个关于整个实验室应该向何处去，或者有关整个贝尔系统，你就得到该去的位子让它实现。你从底层是无法轻易让它实现的。\n这取决于你的目标和对目标的渴望。我选择回避管理工作因为我更希望做我容易应付的事。但这是我的选择，只对我起作用。每个人有权做出自己的选择，保持一个开放的心态。但别试着两样都占。\n（完）\n","date":"2023-04-21","permalink":"/posts/you_and_your_research/","section":"Posts","summary":"You and Your Research 作者：理查德·汉明（Richard Hamming） 译者：未知 时间：1986年3月7日 From: 理查德·汉明《你和你的研究》 我演讲的题目是\u0026quot;你和你的研究\u0026quot;。我要谈的不是普通的研究，而","title":"你和你的研究（精简版）"},{"content":"","date":"2023-04-21","permalink":"/tags/%E5%85%B6%E4%BB%96/","section":"Tags","summary":"","title":"其他"},{"content":"","date":"2023-04-21","permalink":"/tags/%E8%BD%AC%E8%BD%BD/","section":"Tags","summary":"","title":"转载"},{"content":"","date":"0001-01-01","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"}]